package sheepgenetics.api;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.DefaultHttpClient;
import java.security.MessageDigest;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import java.io.*;
import java.security.*;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.sql.*;

public class SheepGeneticsNetService extends Service {

	@Override
	public IBinder onBind(Intent arg0) {
		// TODO Auto-generated method stub
		return null;
	}
	private static String SHA1(String s) throws Exception {
		
		
	   MessageDigest md = MessageDigest.getInstance("SHA-1");
	   md.update(s.getBytes());
	   byte[] bytes = md.digest();
	   return bytesToHex(bytes);
	}
	
	private static String HmacSHA1(String value, String key)
	throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException { 
		String type = "HmacSHA1";
		SecretKeySpec secret = new SecretKeySpec(key.getBytes(), type);
		Mac mac = Mac.getInstance(type);
		mac.init(secret);
		byte[] bytes = mac.doFinal(value.getBytes()); 
		return bytesToHex(bytes); 
		} 
		
		private final static char[] hexArray = "0123456789abcdef".toCharArray();
		
		private static String bytesToHex(byte[] bytes) {
			char[] hexChars = new char[bytes.length * 2]; 
			int v; 
			for (int j = 0; j < bytes.length; j++) { 
				v = bytes[j] & 0xFF; hexChars[j * 2] = hexArray[v >>> 4];
				hexChars[j * 2 + 1] = hexArray[v & 0x0F];
				} 
			return new String(hexChars);
		}
	
	
	
	
	public String AnimalRequest(final SheepGeneticsDemoActivity act,
								final String server,
			                    final int analysisId,
			                    final String animalId,
			                    final String username,
			                    final String password)
	{
	
		new Thread(new Runnable() {
		    //Thread to stop network calls on the UI thread
		    public void run() {
		    	String msg;
		try
		{
			// the secret used to create the HMAC is your private API key plus the users password which has been hashed to a particular recipe
			String userName = "public";
			String userPassword = "public";
			String userPassPhrase = userName + "SGPasswordSalt" + userPassword;
			String hashedUserPassPhrase = "";
			String error = "";
// when writing an application, you should store ONLY the hashed version of the user password if you are caching user crediantials for a user.
// if they change their password, ask them to re-enter it, re-calculate the hash and store the hash
            try {
			 hashedUserPassPhrase =  SHA1(userPassPhrase);
			}
			catch (java.lang.Exception ex)
			{
				msg = ex.getMessage();
				act.onError(msg);
			}
// The following two keys are generated by Sheep Genetics and you need to apply for them
// For demo purposes, we have generated a limited pair of keys that have reduced functionality for demonstration purposes
			String secretAppAPIKey = "87a52d10878602fbcd92f98e9d825886";
			String publicAppAPIKey = "eec14b44831b571a7dbbc70432a4c145";

// each message is accompanied by the application public key, the user name and a timestamp
			int timeStamp = Math.round(System.currentTimeMillis() / 1000);
			String messageSignature = publicAppAPIKey + userName + timeStamp;
// Create a HMAC using the secrets
			String hmac = "";
			try {
				hmac = HmacSHA1(messageSignature,secretAppAPIKey + hashedUserPassPhrase);
			}
			catch (java.lang.Exception ex) {
				msg = ex.getMessage();
				act.onError(msg);
			}
// now we can make a request:

			//url = "http://sgsearch.sheepgenetics.org.au/api/1/1/analyses.xml?timestamp=" +timeStamp + "&appid=" + publicAppAPIKey + "&userid=" + userName + "&apikey=" + hmac;

		DefaultHttpClient hc = new DefaultHttpClient();
		String url = "http://" + server + "/api/1/findanimal/" + animalId + ".json?timestamp=" +timeStamp + "&appid=" + publicAppAPIKey + "&userid=" + userName + "&apikey=" + hmac;
		act.onError(url);
		
		HttpGet get = new HttpGet(url);
		HttpResponse rp = hc.execute(get);
		if(rp.getStatusLine().getStatusCode() == HttpStatus.SC_OK)
		{
			BufferedReader reader = new BufferedReader(new InputStreamReader(rp.getEntity().getContent(), "UTF-8"));
			StringBuilder builder = new StringBuilder();
			for (String line = null; (line = reader.readLine()) != null;) {
			    builder.append(line).append("\n");
			}
			try {
			JSONTokener tokener = new JSONTokener(builder.toString());
			JSONObject finalResult = new JSONObject(tokener);
			act.onReceive(finalResult);
			}
			catch(JSONException jse)
			{
				msg = jse.getMessage();
				act.onError(builder.toString());
			}
			}
			
		else
		{
			act.onError(rp.getStatusLine().getReasonPhrase() + url);
		}
		}catch(IOException e){
				msg = e.getMessage();
				act.onError(msg);
		}
		    }
		}).start();
		
		return "Please Wait...";
	}

}
